using UnityEngine;

/// <summary>
/// Generador de objetos.
/// 
/// Developed by Alejandro Benítez & Fernando Paniagua. 2019.
/// </summary>
[ExecuteInEditMode]
public class GameObjectsGenerator : MonoBehaviour
{
    [Header("Array de objetos a crear")]
    public AutoGeneratedObject[] generateObjectSO;
    [Header("Posición x, z inferior")]
    public Transform x0z0;
    [Header("Posición x superior")]
    public Transform x1;
    [Header("Posición z superior")]
    public Transform z1;
    [Header("Origen del Raycast para fijar los objetos al suelo")]
    public Transform y1;
    [Header("Objeto padre de los objetos creados")]
    public GameObject emptyParentObject;
    [Header("Capa de terreno para el Raycast que fija los objetos al suelo")]
    public LayerMask terrainLayerMask;
    [Header("Activa para generar")]
    public bool GenerateButton = false;

    private void Update()
    {
        if (GenerateButton)
        {
            GenerateObjects();
            GenerateButton = false;
        }
    }

    /// <summary>
    /// Genera y ubica los objetos dentro del área indicada.
    /// </summary>
    private void GenerateObjects()
    {
        ClearParent();
        float x, z;
        GameObject newObject;
        for (int i = 0; i < generateObjectSO.Length; ++i)
        {
            for (int j = 0; j < generateObjectSO[i].numberOfInstances; ++j)
            {
                //Instanciación
                newObject = Instantiate(generateObjectSO[i].prefab, emptyParentObject.transform);
                //Rotación
                if (generateObjectSO[i].randomYRotation)
                {
                    newObject.transform.Rotate(new Vector3(0, Random.Range(0, 360), 0));
                }
                //Escala
                if (generateObjectSO[i].maxScaleRange != 1 || generateObjectSO[i].minScaleRange != 1)
                {
                    newObject.transform.localScale *= 
                        Random.Range(generateObjectSO[i].minScaleRange,
                        generateObjectSO[i].maxScaleRange); ;
                }
                //Posición
                x = Random.Range(x0z0.position.x, x1.position.x);
                z = Random.Range(x0z0.position.z, z1.position.z);
                print(x + ":" + z);
                Vector3 rayOrigin = new Vector3(x, y1.position.y, z);
                RaycastHit hit;
                if (Physics.Raycast(rayOrigin, Vector3.down, out hit, terrainLayerMask))
                {
                    newObject.transform.position = new Vector3(x, hit.point.y + generateObjectSO[i].yOffset, z);
                } else
                {
                    Destroy(newObject);
                }
            }
        }
    }

    /// <summary>
    /// Elimina los objetos creados en la creación anterior.
    /// </summary>
    private void ClearParent()
{
    Transform[] transforms = emptyParentObject.GetComponentsInChildren<Transform>();
    print(transforms.Length);
    foreach (Transform child in transforms)
    {
        if (child.gameObject != emptyParentObject)
        {
            DestroyImmediate(child.gameObject);
        }
    }
}
}
